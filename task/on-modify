#!/bin/bash

# The on-modify event is triggered separately for each task modified. This hook
# script can accept/reject the modification. Processing will continue.

# Input:
# - line of JSON for the original task
# - line of JSON for the modified task, the diff being the modification
read ORIGINAL_TASK
read MODIFIED_TASK

# Output:
# - JSON, modified or unmodified.
# - Optional feedback/error.
echo ${MODIFIED_TASK}

FRESHSALES_TOKEN=$(cat ~/.freshsales | jq -r '.token')
FRESHSALES_DOMAIN=$(cat ~/.freshsales | jq -r '.domain')

function update_task() {
  local _ID=${1}
  shift
  local _NEWJSON=${@}

  curl -H "Authorization: Token token=${FRESHSALES_TOKEN}" \
    -H "Content-Type: application/json" \
    -d "${_NEWJSON}" \
    -X PUT https://${FRESHSALES_DOMAIN}.freshsales.io/api/tasks/${_ID} > /dev/null 2>&1
}

function format_date() {
  read _D
  echo "\"${_D:0:4}-${_D:4:2}-${_D:6:2}T${_D:9:2}:${_D:11:2}:${_D:13:2}.000Z\""
}

FRESHSALES_ID=$(echo ${MODIFIED_TASK} | jq -r '.freshsales_id')
STATUS=$(echo ${MODIFIED_TASK} | jq -r '.status')
if [ "${STATUS}" == "completed" ]; then
  STATUS=1
else
  STATUS=0
fi
DUE_DATE=$(echo ${MODIFIED_TASK} | jq -r '.due' | format_date)
TITLE=$(echo ${MODIFIED_TASK} | jq '.description')

if [ "${FRESHSALES_ID}" != "null" ]; then
  echo "Updating Freshsales Task"
  update_task ${FRESHSALES_ID} "{\"task\":{\"status\":${STATUS},\"title\":${TITLE},\"due_date\":${DUE_DATE}}}"
fi

# Status:
# - 0:     JSON accepted, non-JSON is feedback.
# - non-0: JSON ignored, non-JSON is error.
exit 0
